<?php

namespace DummyNamespace;

use DummyRootNamespaceHttp\Requests;
use DummyRootNamespaceHttp\Controllers\Controller;

use Entrust;
use Redirect;
use DummyRootNamespaceModules\{{moduleName}}\{{modelName}};
use Illuminate\Http\Request;
use Carbon\Carbon;
use Session;
use Illuminate\Support\Facades\Input;

class DummyClass extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return void
     */
    public function index($order_by='id', $order_direct='asc')
    {

            if (!Entrust::can('access-{{crudName}}')) {
                return view('accessdenied');
            }


        $order_by         = Input::get('order_by')
                          ? Input::get('order_by')
                          : $order_by;

        $order_direct     = Input::get('order_direct')
                          ? Input::get('order_direct')
                          : $order_direct;

        ${{crudName}} = {{modelName}}::orderBy($order_by, $order_direct)->paginate(15);
        return view('{{viewPath}}{{viewName}}::index')
                ->with('{{crudName}}',  ${{crudName}})
                ->with('order_by',      $order_by)
                ->with('order_direct',  $order_direct);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return void
     */
    public function create()
    {
        if (!Entrust::can('create-{{crudName}}')) {
            return view('accessdenied');
        }
        return view('{{viewPath}}{{viewName}}::create');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return void
     */
    public function store(Request $request)
    {
        {{validationRules}}
        {{modelName}}::create($request->all());

        Session::flash('flash_message', '{{modelName}} added!');

        return redirect('{{routeGroup}}{{viewName}}');
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     *
     * @return void
     */
    public function show($id)
    {
        if (!Entrust::can('show-{{crudName}}')) {
            return view('accessdenied');
        }
        ${{crudNameSingular}} = {{modelName}}::findOrFail($id);
        return view('{{viewPath}}{{viewName}}::show')->with('{{crudNameSingular}}',${{crudNameSingular}});
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     *
     * @return void
     */
    public function edit($id)
    {
        if (!Entrust::can('edit-{{crudName}}')) {
            return view('accessdenied');
        }
        ${{crudNameSingular}} = {{modelName}}::findOrFail($id);
        return view('{{viewPath}}{{viewName}}::edit')->with('{{crudNameSingular}}',${{crudNameSingular}});;
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  int  $id
     *
     * @return void
     */
    public function update($id, Request $request)
    {
        {{validationRules}}
        ${{crudNameSingular}} = {{modelName}}::findOrFail($id);
        ${{crudNameSingular}}->update($request->all());

        Session::flash('flash_message', '{{modelName}} updated!');

        return redirect('{{routeGroup}}{{viewName}}');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     *
     * @return void
     */
    public function destroy($id)
    {
        {{modelName}}::destroy($id);

        Session::flash('flash_message', '{{modelName}} deleted!');

        return redirect('{{routeGroup}}{{viewName}}');
    }
}
